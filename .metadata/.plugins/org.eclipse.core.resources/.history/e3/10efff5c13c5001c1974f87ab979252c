package com.zoho.fetchlogs;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.Scanner;

import org.json.JSONObject;

import com.zoho.dao.ThreatsRepository;
import com.zoho.dao.ThreatsRepositoryImplementation;
import com.zoho.model.Threat;

public class LogsAnalysis {
	HttpClient client;
	HttpRequest request;
	HttpResponse<String> response;
	ThreatsRepository<String,String> threatsDB = new ThreatsRepositoryImplementation();
	public void analyseLogs() {
		try {
			  File logFile = new File("C:\\Windows\\System32\\LogFiles\\Firewall\\pfirewall.log");
			  Scanner logFileReader = new Scanner(logFile);
			  //ignoring first 5 lines of description
			  for(int i=0;i<5;i++)
				  logFileReader.nextLine();  
			  while (logFileReader.hasNextLine()) {
				 String data = logFileReader.nextLine();
				 String[] parts = data.split(" ");
				 //ip address which it access
				 System.out.println(parts[5]);
				 if(isThreat(parts[5])) {
					 //add in db
					 threatsDB.save(parts[5], );
					
				 }
					 
			  }
			  logFileReader.close();
		   } 
		   catch (FileNotFoundException e) {
			   System.out.println("An error occurred.");
			   e.printStackTrace();
		   }
	}
	private Threat isThreat(String ipAddr) {
		client = HttpClient.newHttpClient();
        request = HttpRequest.newBuilder()
                .uri(URI.create("https://api.ipregistry.co/171.25.193.78?key=9mv56mm2dpln5e18&fields=security"))
                .build();
		try {
			response = client.send(request,HttpResponse.BodyHandlers.ofString());
		} catch (IOException | InterruptedException e) {
			e.printStackTrace();
		}
        JSONObject jsonObj = new JSONObject(response.body());
//        System.out.println(obj.get("security"));
//        String security = obj.get("security").toString();
//        System.out.println(security);
        JSONObject siteInfo = new JSONObject(jsonObj.get("security").toString());
        System.out.println(siteInfo);
        if(siteInfo.getBoolean("is_abuser") || siteInfo.getBoolean("is_attacker") || siteInfo.getBoolean("is_threat")) {
        	Threat threat = new Threat(
        			siteInfo.getBoolean("is_cloud_provider"),
        			siteInfo.getBoolean("is_vpn"),
        			siteInfo.getBoolean("is_tor_exit")  ,
        			siteInfo.getBoolean("is_attacker"),
        			siteInfo.getBoolean("is_relay"),
        			siteInfo.getBoolean("is_anonymous"),
        			siteInfo.getBoolean("is_threat"),
        			siteInfo.getBoolean("is_bogon"),
        			siteInfo.getBoolean("is_tor"),
        			siteInfo.getBoolean("is_proxy") );
        	
        }
        return null;
	}

}
